#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -euo pipefail


# -- Set program name and version.

TOOL_NAME="DiffDir"
TOOL_SHRT_NAME="diffdir"
TOOL_VERSION="0.0.1_$(date +%Y%m%d)"
VENDOR='Nitrux Latinoamericana S.C.'
FECHA=$(date +%Y)


# -- Function to display help and usage information.

display_help() {
    echo "$TOOL_NAME "
    echo "Description:"
    echo ""
    echo "    $TOOL_NAME is a utility to create a file list from a directory and then compare these lists."
    echo ""
    echo "    Report bugs at: https://github.com/Nitrux/nitrux-bug-tracker/issues."
    echo ""
    echo "Usage: $TOOL_SHRT_NAME [option] [arguments]"
    echo ""
    echo "Options:"
    echo "  -g, --generate [directory]      Generate a file list from the specified directory."
    echo "  -c, --compare [file1] [file2]   Compare two existing file lists and list differences."
    echo "  -h, --help                      Display this help message."
    echo ""
    echo "Examples:"
    echo "  $TOOL_SHRT_NAME -g /Applications          # Generate file list for /Applications"
    echo "  $TOOL_SHRT_NAME -c LIST1.txt LIST2.txt    # Compare file lists LIST1.txt and LIST2.txt"
}

display_version() {
    echo "Version: $TOOL_VERSION."
    echo ""
    echo "The license used for this program is: BSD-3-Clause."
    echo ""
    echo "Authors:"
    echo ""
    echo "    Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>"
    echo ""
    echo "(c) $FECHA Some Rights Reserved. Made by $VENDOR"
}


# -- Function to generate a file list with path, checksum, timestamp, and size.

generate_file_list() {
    local DIR_PATH="$1"
    local DIR_NAME
    local FILE_LIST_PATH
    local SYMLINK_LIST_PATH
    local TEMP_FIND_OUTPUT
    local TOTAL
    local COUNT=0

    DIR_NAME=$(basename "$DIR_PATH")
    FILE_LIST_PATH="${DIR_PATH%/}/${DIR_NAME}_file_list.txt"
    SYMLINK_LIST_PATH="${DIR_PATH%/}/${DIR_NAME}_symlink_list.txt"

    TEMP_FIND_OUTPUT=$(mktemp -p /tmp)

    : > "$FILE_LIST_PATH"
    : > "$SYMLINK_LIST_PATH"

    TOTAL=$(find "$DIR_PATH" \( -type f -o -type l \) -not -path "$FILE_LIST_PATH" -not -path "$SYMLINK_LIST_PATH" | wc -l)

    find "$DIR_PATH" \( -type f -o -type l \) -not -path "$FILE_LIST_PATH" -not -path "$SYMLINK_LIST_PATH" | while IFS= read -r FILE; do
        COUNT=$((COUNT + 1))
        echo "Processing file $COUNT of $TOTAL"

        if [ -L "$FILE" ]; then
            local TARGET
            if ! TARGET=$(readlink "$FILE"); then
                echo "Error: readlink command failed for $FILE"
                continue
            fi
            echo "$FILE -> $TARGET" >> "$SYMLINK_LIST_PATH"
        else
            local CHECKSUM
            if ! CHECKSUM=$(sha256sum "$FILE" | awk '{ print $1 }'); then
                echo "Error: sha256sum failed for $FILE"
                continue
            fi
            echo "$CHECKSUM $FILE" >> "$FILE_LIST_PATH"
        fi
    done < "$TEMP_FIND_OUTPUT"

    rm "$TEMP_FIND_OUTPUT"
    mv "$FILE_LIST_PATH" "$PWD"
    mv "$SYMLINK_LIST_PATH" "$PWD"
}


# -- Function to normalize paths.

normalize_paths() {
    local ORIGINAL_LIST=$1
    local NORMALIZED_LIST=$2
    sort "$ORIGINAL_LIST" > "$NORMALIZED_LIST"
}


# -- Function to compare file lists and generate a list of differences.

compare_file_lists() {
    local LIST1=$1
    local LIST2=$2
    local TOTAL_LINES
    local CURRENT_LINE
    local DIFF_LIST_PATH
    local TEMP_DIFF_CHECKSUMS
    local TEMP_DIFF_UNIQUE
    local NORM_LIST1
    local NORM_LIST2

    DIFF_LIST_PATH="$(pwd)/dir_diff_list.txt"
    TEMP_DIFF_CHECKSUMS=$(mktemp)
    TEMP_DIFF_UNIQUE=$(mktemp)
    NORM_LIST1=$(mktemp)
    NORM_LIST2=$(mktemp)

    normalize_paths "$LIST1" "$NORM_LIST1"
    normalize_paths "$LIST2" "$NORM_LIST2"

    TOTAL_LINES=$(wc -l < "$NORM_LIST1")
    CURRENT_LINE=0

    while IFS= read -r LINE_FROM_LIST1; do
        CURRENT_LINE=$((CURRENT_LINE + 1))
        CHECKSUM=$(echo "$LINE_FROM_LIST1" | cut -d ' ' -f 1)
        FILEPATH=$(echo "$LINE_FROM_LIST1" | cut -d ' ' -f 2-)

        echo "Comparing: Line $CURRENT_LINE of $TOTAL_LINES"

        if grep -Fq "$FILEPATH" "$NORM_LIST2"; then
            if ! grep -Fq "$CHECKSUM $FILEPATH" "$NORM_LIST2"; then
                echo "$LINE_FROM_LIST1" >> "$TEMP_DIFF_CHECKSUMS"
            fi
        else
            echo "$LINE_FROM_LIST1" >> "$TEMP_DIFF_UNIQUE"
        fi
    done < "$NORM_LIST1"

    {
        echo "##### File(s) with different CHECKSUM that exist in both lists"
        cat "$TEMP_DIFF_CHECKSUMS"
        echo ""
        echo "##### File(s) found in $LIST1 but not in $LIST2"
        cat "$TEMP_DIFF_UNIQUE"
    } >> "$DIFF_LIST_PATH"

    rm "$TEMP_DIFF_CHECKSUMS" "$TEMP_DIFF_UNIQUE" "$NORM_LIST1" "$NORM_LIST2"

    if [ -s "$DIFF_LIST_PATH" ]; then
        echo "Differences have been found and listed in $DIFF_LIST_PATH"
    else
        echo "No differences found."
    fi
}


# -- Main script logic based on flag.

while (( "$#" )); do
    case "$1" in
        -d|--debug)
            set -x
            shift
            ;;

        -g|--generate)
            if [ -z "$2" ]; then
                echo "Error: No directory specified for file list generation."
                echo ""
                display_help
                exit 1
            fi
            generate_file_list "$2"
            exit 0
            ;;

        -c|--compare)
            if [ $# -lt 3 ]; then
                echo "Error: Two file lists must be specified for comparison."
                echo ""
                display_help
                exit 1
            fi
            compare_file_lists "$2" "$3"
            exit 0
            ;;

        -h|--help)
            display_help
            exit 0
            ;;

        -v|--version)
            display_version
            exit 0
            ;;

        *)
            echo "Error: Invalid option."
            echo ""
            display_help
            exit 1
            ;;
    esac
done
