#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2025> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -euo pipefail


# -- Set program name and version.

TOOL_NAME="Nitrux Disk Benchmark"
TOOL_VERSION="$(md5sum "$0" | cut -c -32)"
VENDOR='Nitrux Latinoamericana S.C.'
FECHA=$(date +%Y)


# -- Check if script is run with sudo.

if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root. Use sudo to execute it."
    exit 1
fi


# -- Ensure necessary tools are installed.

if ! command -v fio &>/dev/null || ! command -v ioping &>/dev/null || ! command -v smartctl &>/dev/null; then
    echo "Please install 'fio', 'ioping', and 'smartmontools' first!"
    exit 1
fi


# -- Default values.

DISK_DEVICE=""
PARTITION=""
TEST_DIR=""
RESULT_FILE=""


# -- Parse arguments.

while [[ $# -gt 0 ]]; do
    case $1 in
        --disk)
            DISK_DEVICE="$2"
            shift 2
            ;;
        --partition)
            PARTITION="$2"
            shift 2
            ;;
        --test-dir)
            TEST_DIR="$2"
            shift 2
            ;;
        --results)
            RESULT_FILE="$2"
            shift 2
            ;;
        *)
            echo "Unknown argument: $1"
            echo "Usage: $0 --disk /dev/sdX [--partition /dev/sdX1] --test-dir /path/to/dir [--results output_file.txt]"
            exit 1
            ;;
    esac
done


# -- Validate arguments.

if [[ -z "$DISK_DEVICE" ]]; then
    echo "Error: Disk device is not specified. Use --disk to specify the disk (e.g., /dev/sda or /dev/nvme0n1)."
    exit 1
fi

if [[ -z "$TEST_DIR" ]]; then
    echo "Error: Test directory is not specified. Use --test-dir to specify a directory on the target device."
    exit 1
fi

if [[ -z "$PARTITION" ]]; then
    PARTITION=$(lsblk -npo NAME "$DISK_DEVICE" | grep -E "^${DISK_DEVICE}[a-z0-9]*$")
    if [[ -z "$PARTITION" ]]; then
        echo "Error: No partition found on $DISK_DEVICE. Specify a partition using --partition."
        exit 1
    fi
fi


# -- Verify that the test directory is on the specified partition.

TEST_DIR_DEVICE=$(findmnt -n -o SOURCE "$TEST_DIR" 2>/dev/null || echo "NotFound")
if [[ "$TEST_DIR_DEVICE" == "NotFound" ]]; then
    echo "Error: Could not determine the source device for $TEST_DIR. Is it properly mounted?"
    exit 1
fi

TEST_DIR_DEVICE=${TEST_DIR_DEVICE//\[*\]/}

if [[ "$TEST_DIR_DEVICE" != "$PARTITION" ]]; then
    echo "Error: Test directory $TEST_DIR is not on the specified partition $PARTITION."
    echo "Found: $TEST_DIR_DEVICE"
    exit 1
fi


# -- Functions.

clear_caches() {
    sync
    echo 3 > /proc/sys/vm/drop_caches
}


output_results() {
    if [[ -n "$RESULT_FILE" ]]; then
        echo "$1" >> "$RESULT_FILE"
    else
        echo -e "$1"
    fi
}


# -- Detect disk type (SATA, NVMe, or USB).

get_disk_info() {
    local model capacity dom
    if [[ "$DISK_DEVICE" =~ ^/dev/nvme ]]; then
        model=$(sudo smartctl -i "$DISK_DEVICE" | grep "Model Number" | awk -F: '{print $2}' | xargs)
        capacity=$(lsblk -ndo SIZE "$DISK_DEVICE")
        dom=$(sudo smartctl -i "$DISK_DEVICE" | grep "Firmware Version" | awk -F: '{print $2}' | xargs)
    else
        model=$(sudo smartctl -i "$DISK_DEVICE" | grep "Device Model" | awk -F: '{print $2}' | xargs)
        capacity=$(lsblk -ndo SIZE "$DISK_DEVICE")
        dom=$(sudo smartctl -i "$DISK_DEVICE" | grep "Manufactured" | awk -F: '{print $2}' | xargs)
    fi

    DISK_MODEL=${model:-Unknown}
    DISK_CAPACITY=${capacity:-Unknown}
    DISK_DOM=${dom:-Unknown}
}


# -- Fetch disk details.

get_disk_info


# -- Write header to results file or console.

output_results "| $TOOL_NAME v$TOOL_VERSION."
output_results "| (c) $FECHA Some Rights Reserved."
output_results "| Made by $VENDOR."
output_results ""
output_results "Disk Model:           ${DISK_MODEL:-Unknown}"
output_results "Date of Manufacture:  ${DISK_DOM:-Unknown}"
output_results "Capacity:            ${DISK_CAPACITY:-Unknown}"
output_results ""


# -- Measure write speed.

clear_caches
output_results "Measuring write speed..."
WRITE_RESULT=$(fio --name=write_test --filename="$TEST_DIR/disk_test_file" --size=1G --bs=128K --rw=write --direct=1 --numjobs=1 --time_based --runtime=10 --group_reporting | grep "WRITE" | awk '{print $2, $3}')
output_results "Disk Write:           ${WRITE_RESULT:-Unknown}\n"


# -- Measure read speed.

clear_caches
output_results "Measuring read speed..."
READ_RESULT=$(fio --name=read_test --filename="$TEST_DIR/disk_test_file" --size=1G --bs=128K --rw=read --direct=1 --numjobs=1 --time_based --runtime=10 --group_reporting | grep "READ" | awk '{print $2, $3}')
output_results "Disk Read:            ${READ_RESULT:-Unknown}\n"


# -- Measure latency with ioping.

clear_caches
output_results "Measuring disk latency..."
LATENCY_RESULT=$(ioping -c 10 "$TEST_DIR" | grep "min/avg/max" | awk '{print $4}')
output_results "Disk Latency:         ${LATENCY_RESULT:-Unknown}\n"


# -- Cleanup.

rm -f "$TEST_DIR/disk_test_file"

if [[ -n "$RESULT_FILE" ]]; then
    echo "Benchmark results saved in $RESULT_FILE"
    cat "$RESULT_FILE"
fi

clear_caches
