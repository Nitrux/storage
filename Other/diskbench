#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2025> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -euo pipefail


# -- Set program name and version.

TOOL_NAME="Nitrux Disk Benchmark"
TOOL_SHRT_NAME="diskbench"
TOOL_VERSION="$(md5sum "$0" | cut -c -32)"
VENDOR='Nitrux Latinoamericana S.C.'
FECHA=$(date +%Y)


# -- Print informative messages to stderr.

puts_info() {
	if [ -n "$1" ]; then
		printf "%s: \e[34mInfo:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print success messages to stderr.

puts_success() {
	if [ -n "$1" ]; then
		printf "%s: \e[32mSuccess:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print error messages to stderr.

puts_error() {
	if [ -n "$1" ]; then
		printf "%s: \e[31mError:\e[0m %b\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print messages or text using multiple lines to stderr.

print_message() {
	if [ $# -eq 0 ]; then
		printf "\n" >&2
	else
		printf "%s\n" "$@" >&2
	fi
}


# -- Print warning messages to stderr.

puts_warning() {
    if [ -n "$1" ]; then
        printf "%s: \e[33mWarning:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
    fi
}


# -- Check if utility is run with sudo.

if [[ $EUID -ne 0 ]]; then
    echo "This utility must be run as root. Use sudo to execute it."
    exit 1
fi


# -- Display an error when no flag is used.

error() {
    puts_error "$*"
    exit 1
}


# -- Ensure necessary tools are installed.

if ! command -v fio &>/dev/null || ! command -v ioping &>/dev/null || ! command -v smartctl &>/dev/null; then
    puts_error "Please install 'fio', 'ioping', and 'smartmontools' first!"
    exit 1
fi


# -- Functions.

clear_caches() {
    sync
    echo 3 > /proc/sys/vm/drop_caches
}

output_results() {
    if [[ -n "$RESULT_FILE" ]]; then
        puts_info "$1" >> "$RESULT_FILE"
    else
        echo -e "$1"
    fi
}

get_disk_interface() {
    local interface
    interface=$(lsblk -ndo TRAN "$DISK_DEVICE" 2>/dev/null | xargs || \
               udevadm info --query=property --name="$DISK_DEVICE" 2>/dev/null | grep -oP 'ID_BUS=\K\w+' || echo "unknown")
    DISK_INTERFACE=${interface:-Unknown}
}

get_disk_info() {
    local model capacity dom

    if [[ "$DISK_DEVICE" =~ ^/dev/nvme ]]; then
        model=$(smartctl -i "$DISK_DEVICE" | grep -i "Model Number" | awk -F: '{print $2}' | xargs || true)
        dom=$(smartctl -i "$DISK_DEVICE" | grep -i "Firmware Version" | awk -F: '{print $2}' | xargs || true)
    else
        model=$(smartctl -i "$DISK_DEVICE" | grep -i "Device Model" | awk -F: '{print $2}' | xargs || true)
        dom=$(smartctl -i "$DISK_DEVICE" | grep -i "Manufactured" | awk -F: '{print $2}' | xargs || true)
    fi

    if [[ -z "$model" ]]; then
        model=$(lsblk -no MODEL "$DISK_DEVICE" | head -n 1 | xargs || echo "Unknown")
    fi
    if [[ -z "$dom" ]]; then
        dom="Unknown (USB-connected or unreported)"
    fi

    capacity=$(lsblk -ndo SIZE "$DISK_DEVICE" | xargs || echo "Unknown")

    DISK_MODEL=${model:-Unknown}
    DISK_CAPACITY=${capacity:-Unknown}
    DISK_DOM=${dom:-Unknown}

    get_disk_interface

    case "$DISK_INTERFACE" in
        "nvme")
            IO_SIZE="10g"
            ;;
        "sata"|"ata")
            IO_SIZE="5g"
            ;;
        "usb")
            IO_SIZE="500m"
            ;;
        *)
            IO_SIZE="250m"
            ;;
    esac
}

get_disk_health() {
    local health_status

    health_status=$(smartctl -H "$DISK_DEVICE" 2>/dev/null | grep -i 'SMART overall-health' | awk -F: '{print $2}' | xargs || true)

    if [[ -z "$health_status" ]]; then
        DISK_HEALTH="Unknown"
    else
        DISK_HEALTH="$health_status"
    fi
}

get_disk_temperature() {
    local temperature=""

    if [[ "$DISK_DEVICE" =~ ^/dev/nvme ]]; then
        temperature=$(smartctl -A "$DISK_DEVICE" | grep -i "Temperature:" | awk '{print $2}' | head -n 1 || echo "Unknown")
    else
        temperature=$(smartctl -A "$DISK_DEVICE" | grep -Ei 'Temperature_Celsius|Airflow_Temperature_Cel' | awk '{print $10}' | head -n 1 || echo "Unknown")
    fi

    if [[ -n "$temperature" && "$temperature" != "Unknown" ]]; then
        DISK_TEMPERATURE="${temperature}"
    else
        DISK_TEMPERATURE="Unknown"
    fi
}

get_disk_power_cycles() {
    local power_cycles

    if [[ "$DISK_DEVICE" =~ ^/dev/nvme ]]; then
        power_cycles=$(smartctl -A "$DISK_DEVICE" | grep -i "Power Cycles:" | awk '{print $3}' || echo "Unknown")
    else
        power_cycles=$(smartctl -A "$DISK_DEVICE" | grep -i "Power_Cycle_Count" | awk '{print $10}' || echo "Unknown")
    fi

    DISK_POWER_CYCLES=${power_cycles:-Unknown}
}

get_disk_power_on_hours() {
    local power_on_hours

    if [[ "$DISK_DEVICE" =~ ^/dev/nvme ]]; then
        power_on_hours=$(smartctl -A "$DISK_DEVICE" | grep -i "Power On Hours:" | awk '{print $4}' || echo "Unknown")
    else
        power_on_hours=$(smartctl -A "$DISK_DEVICE" | grep -i "Power_On_Hours_and_Msec" | awk '{print $10}' || echo "Unknown")
    fi

    DISK_POWER_ON_HOURS=${power_on_hours:-Unknown}
}


# -- Handle script interruption and cleanup.

trap 'clean_on_exit' INT TERM EXIT


# -- Cleanup function to delete disk_test_file and handle result conditions.

clean_on_exit() {
    local temp_file="$TEST_DIR/disk_test_file"

    if [[ -n "$TEST_DIR" && -f "$temp_file" ]]; then
        rm -f "$temp_file"
        puts_info "Deleted temporary test file: $temp_file"
    fi

    if { [[ -n "$RESULT_FILE" && ! -w "$(dirname "$RESULT_FILE")" ]]; } || \
       { [[ ! -d "$TEST_DIR" || ! -w "$TEST_DIR" ]]; }; then
        if [[ -n "$RESULT_FILE" && ! -w "$(dirname "$RESULT_FILE")" ]]; then
            puts_error "The specified results file directory is not writable: $RESULT_FILE"
        fi
        if [[ ! -d "$TEST_DIR" || ! -w "$TEST_DIR" ]]; then
            puts_error "The test directory ($TEST_DIR) does not exist or is not writable."
        fi
        exit 1
    fi

    if [[ -n "$RESULT_FILE" ]]; then
        puts_success "Benchmark results saved to: $RESULT_FILE"
    else
        output_results "âš  Important: No file is specified for saving benchmark results."
    fi

    clear_caches
}


# -- Variables.

DISK_DEVICE=""
PARTITION=""
TEST_DIR=""
RESULT_FILE=""

#   ====== START ======

# -- Parse arguments.

while [[ $# -gt 0 ]]; do
    case $1 in
        --disk)
            DISK_DEVICE="$2"
            shift 2
            ;;
        --partition)
            PARTITION="$2"
            shift 2
            ;;
        --test-dir)
            TEST_DIR="$2"
            shift 2
            ;;
        --results)
            RESULT_FILE="$2"
            shift 2
            ;;
        *)
            puts_error "Unknown argument: $1"
            puts_info "Usage: $0 --disk /dev/sdX [--partition /dev/sdX1] --test-dir /path/to/dir [--results output_file.txt]"
            exit 1
            ;;
    esac
done


# -- Validate disk device.

if [[ ! "$DISK_DEVICE" =~ ^/dev/(sd[a-z]|nvme[0-9]+n[0-9]+)$ ]]; then
    puts_error "Unsupported or invalid disk device: $DISK_DEVICE"
    print_message ""
    puts_info "Supported devices are:"
    puts_info "  - SATA/SCSI devices: /dev/sdX"
    puts_info "  - NVMe devices: /dev/nvmeXnY"
    print_message ""
    puts_info "Unsupported devices include:"
    puts_info "  - IDE drives: /dev/hdX"
    puts_info "  - Tapes: /dev/stX, /dev/nstX"
    puts_info "  - Floppy drives: /dev/fdX"
    puts_info "  - RAM disks: /dev/ramX"
    puts_info "  - Loop devices: /dev/loopX"
    puts_info "  - Optical drives: /dev/srX"
    exit 1
fi

# -- Validate arguments.

if [[ -z "$DISK_DEVICE" ]]; then
    puts_error "Disk device is not specified. Use --disk to specify the disk (e.g., /dev/sda or /dev/nvme0n1)."
    exit 1
fi

if [[ -z "$TEST_DIR" ]]; then
    puts_error "Test directory is not specified. Use --test-dir to specify a directory on the target device."
    exit 1
fi

if [[ -z "$PARTITION" ]]; then
    PARTITION=$(lsblk -npo NAME "$DISK_DEVICE" | grep -E "^${DISK_DEVICE}[a-z0-9]*$")
    if [[ -z "$PARTITION" ]]; then
        puts_error "No partition found on $DISK_DEVICE. Specify a partition using --partition."
        exit 1
    fi
fi


# -- Verify that the test directory is on the specified partition.

TEST_DIR_DEVICE=$(findmnt -n -o SOURCE "$TEST_DIR" 2>/dev/null || echo "NotFound")
if [[ "$TEST_DIR_DEVICE" == "NotFound" ]]; then
    puts_error "Could not determine the source device for $TEST_DIR. Is it properly mounted?"
    exit 1
fi

TEST_DIR_DEVICE=${TEST_DIR_DEVICE//\[*\]/}

if [[ "$TEST_DIR_DEVICE" != "$PARTITION" ]]; then
    puts_error "Test directory $TEST_DIR is not on the specified partition $PARTITION."
    puts_info "Found: $TEST_DIR_DEVICE"
    exit 1
fi


# -- Prevent multiple benchmarks on same device.

if [[ -f "$TEST_DIR/disk_test_file" ]]; then
    puts_error "Temporary test file already exists. Please remove it manually to proceed."
    exit 1
fi


# -- Fetch disk details.

get_disk_info
get_disk_health
get_disk_temperature
get_disk_power_cycles
get_disk_power_on_hours


# -- Write header to results file or console.

output_results "| $TOOL_NAME version: $TOOL_SHRT_NAME-$TOOL_VERSION."
output_results "| The license used for this file and its contents is BSD-3-Clause."
output_results "| (c) $FECHA Some Rights Reserved. Made by $VENDOR"
output_results ""
output_results "Disk Model:           ${DISK_MODEL:-Unknown}"
output_results "Date of Manufacture:  ${DISK_DOM:-Unknown}"
output_results "Capacity:             ${DISK_CAPACITY:-Unknown}"
output_results "Disk Health:          ${DISK_HEALTH:-Unknown}"
output_results "Disk Temperature:     ${DISK_TEMPERATURE:-Unknown}Â°C"
output_results "Power Cycles:         ${DISK_POWER_CYCLES:-Unknown}"
output_results "Power On Hours:       ${DISK_POWER_ON_HOURS:-Unknown} hours"
output_results ""


# -- Measure sequential write speed with big blocks (QD32).

clear_caches
output_results "Measuring sequential write speed with big blocks (QD32)..."
SEQ_WRITE_RESULT=$(fio --name=seq_write_test --eta-newline=5s --filename="$TEST_DIR/disk_test_file" \
--rw=write --size=500m --io_size="$IO_SIZE" --blocksize=1024k --ioengine=libaio --fsync=10000 --iodepth=32 \
--direct=1 --numjobs=1 --runtime=60 --group_reporting | grep "WRITE" | awk '{print $2, $3}')
output_results "Sequential Write (QD32): ${SEQ_WRITE_RESULT//,/}"
output_results ""


# -- Measure sequential read speed with big blocks (QD32).

clear_caches
output_results "Measuring sequential read speed with big blocks (QD32)..."
SEQ_READ_RESULT=$(fio --name=seq_read_test --eta-newline=5s --filename="$TEST_DIR/disk_test_file" \
--rw=read --size=500m --io_size="$IO_SIZE" --blocksize=1024k --ioengine=libaio --fsync=10000 --iodepth=32 \
--direct=1 --numjobs=1 --runtime=60 --group_reporting | grep "READ" | awk '{print $2, $3}')
output_results "Sequential Read (QD32): ${SEQ_READ_RESULT//,/}"
output_results ""


# -- Measure random 4K write speed (QD1).

clear_caches
output_results "Measuring random 4K write speed (QD1)..."
RAND_WRITE_RESULT=$(fio --name=rand_write_test --eta-newline=5s --filename="$TEST_DIR/disk_test_file" \
--rw=randwrite --size=500m --io_size="$IO_SIZE" --blocksize=4k --ioengine=libaio --fsync=1 --iodepth=1 \
--direct=1 --numjobs=1 --runtime=60 --group_reporting | grep "WRITE" | awk '{print $2, $3}')
output_results "Random 4K Write (QD1): ${RAND_WRITE_RESULT//,/}"
output_results ""


# -- Measure random 4K read speed (QD1).

clear_caches
output_results "Measuring random 4K read speed (QD1)..."
RAND_READ_RESULT=$(fio --name=rand_read_test --eta-newline=5s --filename="$TEST_DIR/disk_test_file" \
--rw=randread --size=500m --io_size="$IO_SIZE" --blocksize=4k --ioengine=libaio --fsync=1 --iodepth=1 \
--direct=1 --numjobs=1 --runtime=60 --group_reporting | grep "READ" | awk '{print $2, $3}')
output_results "Random 4K Read (QD1): ${RAND_READ_RESULT//,/}"
output_results ""


# -- Measure mixed random 4K read/write speed (QD1).

clear_caches
output_results "Measuring mixed random 4K read/write speed (QD1)..."
MIXED_RW_RESULT=$(fio --name=mixed_rw_test --eta-newline=5s --filename="$TEST_DIR/disk_test_file" \
--rw=randrw --size=500m --io_size="$IO_SIZE" --blocksize=4k --ioengine=libaio --fsync=1 --iodepth=1 \
--direct=1 --numjobs=1 --runtime=60 --group_reporting | grep -E "(read:|write:)")

MIXED_RW_READ_IOPS=$(echo "$MIXED_RW_RESULT" | grep "read:" | awk -F'IOPS=' '{print $2}' | awk '{print $1}')
MIXED_RW_WRITE_IOPS=$(echo "$MIXED_RW_RESULT" | grep "write:" | awk -F'IOPS=' '{print $2}' | awk '{print $1}')

output_results "Mixed Random 4K RW (QD1): Read IOPS: ${MIXED_RW_READ_IOPS//,/} | Write IOPS: ${MIXED_RW_WRITE_IOPS//,/}"
output_results ""


# -- Measure latency with ioping.

clear_caches
output_results "Measuring disk latency..."
LATENCY_RESULT=$(ioping -c 10 "$TEST_DIR" | grep "min/avg/max" | awk -F'[=/]' '{print $5}' || echo "Unknown")
output_results "Disk Latency (avg):  ${LATENCY_RESULT:-Unknown}"
output_results ""


# -- Explicit cleanup at the end of the script.
clean_on_exit

#   ====== END ======
