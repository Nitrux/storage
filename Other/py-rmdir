#!/usr/bin/env python3

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2024> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################

import os
import sys
import shutil
import time
from shutil import get_terminal_size

def count_items(path):
    if os.path.isfile(path):
        return 1
    count = 0
    for root, dirs, files in os.walk(path):
        count += len(dirs) + len(files)
    return count

def delete_with_progress(path):
    if os.path.isfile(path):
        print(f"Deleting file: {path}")
        start_time = time.time()
        try:
            os.remove(path)
            print("\nDeletion complete!")
        except KeyboardInterrupt:
            print("\nProcess interrupted.")
            sys.exit(1)
        except Exception as e:
            print(f"\nError occurred: {e}")
            sys.exit(1)
        return

    total_items = count_items(path)
    counter = 0
    start_time = time.time()
    recent_files = []

    try:
        for root, dirs, files in os.walk(path, topdown=False):
            for name in files:
                item_path = os.path.join(root, name)
                os.remove(item_path)
                counter += 1
                recent_files.append(item_path)
                if len(recent_files) > 3:
                    recent_files.pop(0)
                show_progress(counter, total_items, recent_files, start_time)

            for name in dirs:
                item_path = os.path.join(root, name)
                shutil.rmtree(item_path)
                counter += 1
                recent_files.append(item_path)
                if len(recent_files) > 3:
                    recent_files.pop(0)
                show_progress(counter, total_items, recent_files, start_time)

        shutil.rmtree(path)
        print("\nDeletion complete!")

    except KeyboardInterrupt:
        print(f"\nProcess interrupted. {counter}/{total_items} items deleted.")
        sys.exit(1)
    except Exception as e:
        print(f"\nError occurred: {e}")
        sys.exit(1)

def show_progress(counter, total_items, recent_files, start_time):
    terminal_width = get_terminal_size().columns
    bar_length = max(20, terminal_width - 40)
    percent_complete = (counter / total_items) * 100
    elapsed_time = time.time() - start_time
    estimated_total_time = (elapsed_time / counter) * total_items if counter > 0 else 0
    remaining_time = estimated_total_time - elapsed_time
    remaining_time_str = time.strftime("%M:%S", time.gmtime(remaining_time))
    filled_length = int(bar_length * counter // total_items)
    bar = 'â–ˆ' * filled_length + '-' * (bar_length - filled_length)

    # Prepare the display of the last three deleted files, truncated if necessary
    recent_display = "\n".join(
        f"{'...' + f[-(terminal_width - 10):] if len(f) > terminal_width - 10 else f}"
        for f in recent_files
    )

    # Clear lines and print the recent files followed by the progress bar
    print(f"\033[F\033[K{recent_display}\033[K\n[{bar}] {percent_complete:.2f}% | ETA: {remaining_time_str}", end='\r', flush=True)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: py-rmdir <path_to_delete>")
        sys.exit(1)

    target_path = sys.argv[1]

    if not os.path.exists(target_path):
        print(f"The path {target_path} does not exist.")
        sys.exit(1)

    delete_with_progress(target_path)
