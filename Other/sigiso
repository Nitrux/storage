#!/usr/bin/env python3

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2024> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################

import os
import argparse
import gnupg

def select_iso_file():
    iso_files = [f for f in os.listdir('.') if f.endswith('.iso')]
    if not iso_files:
        print("No ISO files found in the current directory.")
        return None
    print("Select an ISO file to sign:")
    for i, iso_file in enumerate(iso_files):
        print(f"{i+1}. {iso_file}")
    choice = input("Enter the number of the ISO file to sign: ")
    try:
        choice_index = int(choice) - 1
        if choice_index < 0 or choice_index >= len(iso_files):
            raise ValueError
        return iso_files[choice_index]
    except (ValueError, IndexError):
        print("Invalid choice.")
        return None

def select_key(gpg):
    keys = gpg.list_keys()
    if not keys:
        print("No keys found.")
        return None
    print("Select a key to sign with:")
    for i, key in enumerate(keys):
        print(f"{i+1}. {key['uids'][0]}")
    choice = input("Enter the number of the key to use: ")
    try:
        choice_index = int(choice) - 1
        if choice_index < 0 or choice_index >= len(keys):
            raise ValueError
        return keys[choice_index]['keyid']
    except (ValueError, IndexError):
        print("Invalid choice.")
        return None

def sign_iso(gpg, iso_file, key_id):
    with open(iso_file, 'rb') as f:
        signed_data = gpg.sign_file(f, key_id, detach=True, clearsign=False)
    with open(f'{iso_file}.asc', 'wb') as f:
        f.write(signed_data.data)
    print("ISO file signed successfully.")

def main():
    parser = argparse.ArgumentParser(description='Sign an ISO file with a selected GPG key.')
    parser.add_argument('-f', '--iso-file', help='Path to the ISO file to sign')
    parser.add_argument('key_id', nargs='?', help='ID of the GPG key to use for signing')
    args = parser.parse_args()

    if not args.iso_file:
        args.iso_file = select_iso_file()
        if not args.iso_file:
            return

    gpg = gnupg.GPG()
    if not os.path.exists(args.iso_file):
        print("ISO file not found.")
        return

    if not args.key_id:
        args.key_id = select_key(gpg)
        if not args.key_id:
            return

    sign_iso(gpg, args.iso_file, args.key_id)

if __name__ == "__main__":
    main()
