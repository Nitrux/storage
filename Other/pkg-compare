#!/usr/bin/env python3

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2024> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


import argparse
import re

def load_package_list(file_path):
    """Load package list from a file."""
    packages = {}
    with open(file_path, 'r') as file:
        for line in file:
            if line.startswith('ii'):
                parts = line.split()
                package_name = parts[1].replace(':amd64', '')
                package_version = parts[2]
                packages[package_name] = package_version
    return packages

def compare_package_lists(list_a, list_b):
    """Compare two package lists."""
    newer_versions = {}
    only_in_b = {}
    
    for package, version in list_b.items():
        if package in list_a:
            if version != list_a[package]:
                newer_versions[package] = version
        else:
            only_in_b[package] = version
            
    return list(newer_versions.keys()), list(only_in_b.keys())

def remove_excluded_packages(packages, exclude_list, exclude_patterns):
    """Remove excluded packages based on list and patterns after list creation."""
    return [package for package in packages if package not in exclude_list and not any(re.search(pattern, package) for pattern in exclude_patterns)]

def save_packages_to_file(packages, file_name):
    """Save packages to a file."""
    with open(file_name, 'w') as file:
        for package in packages:
            file.write(f"{package}\n")

def main():
    parser = argparse.ArgumentParser(description="Compare two dpkg package lists.", formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-c", "--compare", nargs=2, metavar=('list1.txt', 'list2.txt'), help="Paths to the package lists to compare, i.e., old_list1.txt new_list2.txt.")
    parser.add_argument("-u", "--out-updated", metavar="update_list.txt", help="File name for saving packages with newer versions.")
    parser.add_argument("-n", "--out-new", metavar="new_list.txt", help="File name for saving packages only in the second list.")

    args = parser.parse_args()

    exclude_list = [
        'mount', 'zlib1g', 'zlib1g-dev', 'linux-headers-liquorix-amd64',
        'linux-image-liquorix-amd64', 'libstdc++-13-dev', 'libstdc++6'
    ]

    exclude_patterns = [
        r'libnvidia-.*-\d+',
        r'nvidia-.*-\d+',
        r'xserver-xorg-video-nvidia-\d+'
    ]

    if args.compare and args.out_updated and args.out_new:
        list_a = load_package_list(args.compare[0])
        list_b = load_package_list(args.compare[1])
        
        newer_versions, only_in_b = compare_package_lists(list_a, list_b)

        filtered_newer_versions = remove_excluded_packages(newer_versions, exclude_list, exclude_patterns)
        filtered_only_in_b = remove_excluded_packages(only_in_b, exclude_list, exclude_patterns)
        
        save_packages_to_file(filtered_newer_versions, args.out_updated)
        save_packages_to_file(filtered_only_in_b, args.out_new)
        
        print(f"Updated packages are saved to {args.out_updated}")
        print(f"Newly added packages are saved to {args.out_new}")
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
