#!/usr/bin/env python3

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2024> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################

import os
import shutil
import subprocess
from tqdm import tqdm
import time
import argparse
import sys
import hashlib

def is_bootable_iso(iso_file):
    return True

def get_file_checksum(file_path):
    with open(file_path, 'rb') as f:
        checksum = hashlib.sha256()
        while True:
            chunk = f.read(4096)
            if not chunk:
                break
            checksum.update(chunk)
    return checksum.hexdigest()

def copy_iso_to_directory(iso_file, target_dir):
    file_size = os.path.getsize(iso_file)
    source_checksum = get_file_checksum(iso_file)

    print(f"Source file: {iso_file}")
    print(f"Target directory: {target_dir}")
    print(f"File size: {file_size} bytes")
    print(f"Source file checksum (SHA-256): {source_checksum}")

    dst_path = os.path.join(target_dir, os.path.basename(iso_file))

    if os.path.exists(dst_path):
        target_checksum = get_file_checksum(dst_path)
        print(f"Target file checksum (SHA-256): {target_checksum}")

        if source_checksum == target_checksum:
            print("File already exists at the target directory with the same checksum. Skipping copy operation.")
            return
        else:
            print("File exists at the target directory but with a different checksum. Deleting it.")

            try:
                os.remove(dst_path)
            except OSError as e:
                print(f"Error deleting file: {e}")
                return

    block_size = 4 * 1024 * 1024  # 4MB block size
    total_blocks = (file_size + block_size - 1) // block_size

    with open(iso_file, 'rb') as src_file:
        with open(dst_path, 'wb') as dst_file:
            with tqdm(total=file_size, unit='B', unit_scale=True, desc='Copying ISO file') as progress:
                for _ in range(total_blocks):
                    block = src_file.read(block_size)
                    if not block:
                        break
                    dst_file.write(block)
                    dst_file.flush()  # Flush the write buffer
                    os.fsync(dst_file.fileno())  # Empty kernel write cache for this file
                    progress.update(len(block))
                    os.fsync(dst_file.fileno())  # Empty kernel write cache for the whole file

    target_checksum = get_file_checksum(dst_path)
    print(f"Target file checksum (SHA-256): {target_checksum}")

    if source_checksum == target_checksum:
        print("Checksums match. File copied successfully.")
    else:
        print("Checksums do not match. File may not have been copied successfully.")

def main():
    parser = argparse.ArgumentParser(description='Copy a bootable ISO file to a directory.')
    parser.add_argument('-f', '--file', help='Path to the bootable ISO file', required=True)
    parser.add_argument('-d', '--directory', help='Target directory', required=True)
    args = parser.parse_args()

    if not os.path.isfile(args.file):
        print("Error: Specified file does not exist.")
        return
    if not is_bootable_iso(args.file):
        print("Error: Specified file is not recognized as a bootable ISO.")
        return
    if not os.path.isdir(args.directory):
        print("Error: Specified directory does not exist.")
        return

    copy_iso_to_directory(args.file, args.directory)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.argv.append('-h')
    main()
