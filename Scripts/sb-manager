#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2024> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -eu


# -- Set program name and version.

TOOL_NAME="Nitrux SB Manager"


# -- Print informative messages to stderr.

puts_info() {
	if [ -n "$1" ]; then
		printf "%s: \e[34mInfo:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print success messages to stderr.

puts_success() {
	if [ -n "$1" ]; then
		printf "%s: \e[32mSuccess:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print error messages to stderr.

puts_error() {
	if [ -n "$1" ]; then
		printf "%s: \e[31mError:\e[0m %b\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print messages or text using multiple lines to stderr.

print_message() {
	if [ $# -eq 0 ]; then
		printf "\n" >&2
	else
		printf "%s\n" "$@" >&2
	fi
}


# -- Print warning messages to stderr.

puts_warning() {
    if [ -n "$1" ]; then
        printf "%s: \e[33mWarning:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
    fi
}


# -- Functions.

overlay_ch() {
	local ROOT=("pkexec" "overlayroot-chroot" "$@")

	if ! command -v "${ROOT[0]}" >/dev/null 2>&1; then
		puts_error "Error: '${ROOT[0]}' command not found. Please make sure it's installed and try again, quitting."
		return 1
	fi

	"${ROOT[@]}"
}


# -- Variables.

MOK_SKEY_PATH="/var/lib/shim-signed/mok/MOK-Kernel.priv"
DER_CERT_PATH="/var/lib/shim-signed/mok/MOK-Kernel.der"
PEM_CERT_PATH="/var/lib/shim-signed/mok/MOK-Kernel.pem"

#   ====== START ======

# -- Check if using UEFI or Legacy.

if [ ! -d /sys/firmware/efi ]; then
	notify-send -a "$TOOL_NAME" -u critical --action=Understood -i "preferences-system-login" "Legacy (BIOS) Mode Detected" "This tool requires the system to be booted in UEFI Mode."
	exit 1
fi


# -- Check Secure Boot status.

notify-send -a "$TOOL_NAME" -i "preferences-system-login" "Status Verification" "Checking Secure Boot status, please wait..."
SB_STATE=$(mokutil --sb-state | grep -oP '(SecureBoot \K(enabled|disabled))')

if [[ "$SB_STATE" == "disabled" ]]; then
	if ! kdialog --yesno "Secure Boot is not enabled in the UEFI. Do you still want to sign the kernel?" --title "$TOOL_NAME"; then
		notify-send -a "$TOOL_NAME" -u critical --action=Understood -i "preferences-system-login" "Kernel Signing Canceled" "If Secure Boot is later enabled, the system will be unbootable without signing the kernel."
		exit 0
	fi
fi


# -- Check for the overlayroot-chroot executable and mounts using OverlayFS.
# -- Quit if either of these checks fails since OverlayFS is assumed to be used.

OVERLAYROOT_CHROOT="/usr/sbin/overlayroot-chroot"

if [[ ! -f "$OVERLAYROOT_CHROOT" ]]; then
	notify-send -a "$TOOL_NAME" -u critical -i "preferences-system-login" "Overlayroot Missing" "The executable $OVERLAYROOT_CHROOT was not found. Quitting."
	exit 1
fi

if ! mount | grep -q "overlayroot"; then
	notify-send -a "$TOOL_NAME" -u critical -i "preferences-system-login" "No OverlayFS Detected" "No OverlayFS mounts are in use. $TOOL_NAME requires OverlayFS to be active. Quitting."
	exit 1
fi


# -- Mount the devices filesystem.

overlay_ch mount -t devtmpfs dev /dev


# -- Mount NX_VAR_LIB partition.
# -- We need to mount this partition because update-secureboot-policy creates the files in /var/lib.

VAR_LIB_PARTITION=$(findfs LABEL=NX_VAR_LIB)

overlay_ch mount -t auto "$VAR_LIB_PARTITION" /var/lib


# -- Check if the signing key and certificate files exist.

if [[ ! -f "$MOK_SKEY_PATH" || ! -f "$PEM_CERT_PATH" ]]; then
	notify-send -a "$TOOL_NAME" -i "preferences-system-login" "Preparing Task" "Generating MOK for Secure Boot, please wait..."
	overlay_ch update-secureboot-policy --new-key
	overlay_ch mv /var/lib/shim-signed/mok/MOK.priv "$MOK_SKEY_PATH"
	overlay_ch mv /var/lib/shim-signed/mok/MOK.der "$DER_CERT_PATH"
	overlay_ch openssl x509 -inform der -in "$DER_CERT_PATH" -out "$PEM_CERT_PATH"
	notify-send -a "$TOOL_NAME" -i "preferences-system-login" "Task Complete" "Successfully generated MOK, continuing..."
fi


# -- Sign the latest kernel.

LATEST_KERNEL=$(find /boot -maxdepth 1 -name 'vmlinuz*' -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2)
SIGNED_KERNEL="/boot/$(basename "$LATEST_KERNEL")"

notify-send -a "$TOOL_NAME" -i "preferences-system-login" "Preparing Task" "Checking if $LATEST_KERNEL is already signed, please wait..."

if sbverify --list "$LATEST_KERNEL" 2>&1 | grep -q "No signature table present"; then
    notify-send -a "$TOOL_NAME" -i "preferences-system-login" "Preparing Task" "Signing $LATEST_KERNEL with MOK, please wait..."
    overlay_ch sbsign --key "$MOK_SKEY_PATH" --cert "$PEM_CERT_PATH" --output "$SIGNED_KERNEL" "$LATEST_KERNEL"
    notify-send -a "$TOOL_NAME" -i "preferences-system-login" "Task Complete" "Successfully signed $LATEST_KERNEL with MOK, continuing..."
else
    notify-send -a "$TOOL_NAME" -i "preferences-system-login" "Task Skipped" "$LATEST_KERNEL is already signed. No further action required."
fi


# -- Enroll the certificate in UEFI.
# -- Use kdialog to inform the user about the enrollment password.

notify-send -a "$TOOL_NAME" -i "preferences-system-login" "Preparing Task" "Checking if MOK is already enrolled, please wait..."

if pkexec mokutil --test-key "$DER_CERT_PATH" 2>&1 | grep -q "is already enrolled"; then
	notify-send -a "$TOOL_NAME" -i "preferences-system-login" "Task Complete" "MOK is already enrolled. No further enrollment is required."
else
	notify-send -a "$TOOL_NAME" -i "preferences-system-login" "Task Complete" "MOK is not enrolled. Enrolling the certificate now."

	ENROLL_PASSWORD=$(pwgen -0A 8 1)

	kdialog --msgbox "We generated a random password to enroll the MOK in mokutil and the Shim UEFI Key Management on reboot.<br><br>Password: $ENROLL_PASSWORD<br><br>Save it securely, as it is also required to remove the MOK from the Shim UEFI Key Management." --title "$TOOL_NAME"

	puts_info "Please use the following password for MOK enrollment: $ENROLL_PASSWORD"
	puts_info "Note: The mokutil input password prompt will not display characters as you type."

	overlay_ch mokutil --import "$DER_CERT_PATH"

	notify-send -a "$TOOL_NAME" -u critical --action=Understood -i "preferences-system-login" "Task Complete" "MOK enrollment successful. Reboot now to approve MOK in MOKManager."
fi

#   ====== END ======
